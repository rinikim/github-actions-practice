name: CI-CD
  
# main branch가 push 되었을 때
on:
  push:
    branches:
      - main

# 지역변수
env:
  S3_BUCKET_NAME: s3-fastcampus
  RESOURCE_PATH: ./src/main/resources/application.yaml
  CODE_DEPLOY_APPLICATION_NAME: CODE-DEPLOY-FAST-CAMPUS
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: CODE-DEPLOY-GROUP

jobs:
  build:
# 운영체제와 맞출 필요없지만, jobs이 어떤 운영체제에서 돌아갈 것인지 표시
  runs-on: ubuntu-latest

  steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
# github에 저장 된 secrets 데이터를 저장한다.
    - name: Set yaml file
      uses: microsoft/variable-substitution@v1
      with:
        files: ${{ env.RESOURCE_PATH }}
      env:
        override.value: ${{ secrets.DI_FROM_SECRET }}

# gradle로 빌드를하기 위한 gradlew에 권한 부여
  - name: Grant execute permission for gradlew
    run: chmod +x ./gradlew
    shell: bash

# gradle로 빌드
  - name: Build with Gradle
# 멀티모듈을 사용해주면 아래부분을 수정해주면 된다.
    run: ./gradlew build
    shell: bash

# 결과파일을 zip파일로 압축한다.
  - name: Make zip file
# 중복되지 않는 이름으로 설정
    run: zip -r ./$GITHUB_SHA .
    shell: bash

# aws로 접근할 수 있는 권한
  - name: Configure AWS credentials
    uses: aws-actions/configure-aws-credentials@v1
    with:
# github settings에 actions secrets에서 설정된 값
  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  aws-region: ${{ secrets.AWS_REGION }}

  - name: Upload to S3
    run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip

  - name: Code Deploy
#  |는 여러줄이기 떄문에 엔터를 칠 것이다 라고 선언
    run: |
      aws deploy create-deployment \
      --deployment-config-name CodeDeployDefault.AllAtOnce \
      --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
      --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
      --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$GITHUB_SHA.zip